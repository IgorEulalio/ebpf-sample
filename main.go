package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"flag"
	"fmt"
	"log"
	"os"
	"os/signal"
	"strings"
	"syscall"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	"golang.org/x/sys/unix"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -type event ebpf execve_exit.c

const version = "v0.1.0"

type config struct {
	syscalls        []string
	filterFilenames []string
}

func parseFlags() *config {
	cfg := &config{}

	syscallsFlag := flag.String("syscalls", "execve", "Comma-separated list of syscalls to trace (currently only execve is supported)")
	filenameFlag := flag.String("filename", "", "Comma-separated list of filenames/paths to filter (e.g., ls,cat,/usr/bin/echo). Empty = show all")
	flag.Parse()

	if *syscallsFlag != "" {
		cfg.syscalls = strings.Split(*syscallsFlag, ",")
		// Trim whitespace from each syscall name
		for i := range cfg.syscalls {
			cfg.syscalls[i] = strings.TrimSpace(cfg.syscalls[i])
		}
	}

	if *filenameFlag != "" {
		cfg.filterFilenames = strings.Split(*filenameFlag, ",")
		// Trim whitespace from each filename
		for i := range cfg.filterFilenames {
			cfg.filterFilenames[i] = strings.TrimSpace(cfg.filterFilenames[i])
		}
	}

	return cfg
}

func main() {
	cfg := parseFlags()

	log.Printf("tracepoint_execve %s starting..", version)
	log.Printf("Tracing syscalls: %v", cfg.syscalls)
	if len(cfg.filterFilenames) > 0 {
		log.Printf("Filtering by filenames: %v", cfg.filterFilenames)
	} else {
		log.Printf("Showing all executions (no filename filter)")
	}
	log.SetPrefix("tracepoint_execve: ")
	log.SetFlags(log.Ltime)

	// Subscribe to signals for terminating the program.
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := ebpfObjects{}
	if err := loadEbpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	// Attach tracepoints for each syscall (both entry and exit)
	var tracepoints []link.Link
	for _, syscallName := range cfg.syscalls {
		// Attach entry tracepoint to capture filename
		entryName := "sys_enter_" + syscallName
		tpEntry, err := link.Tracepoint("syscalls", entryName, objs.TracepointExecveEnter, nil)
		if err != nil {
			log.Fatalf("opening entry tracepoint for %s: %s", syscallName, err)
		}
		tracepoints = append(tracepoints, tpEntry)
		log.Printf("Attached to tracepoint: syscalls/%s", entryName)

		// Attach exit tracepoint to emit events
		exitName := "sys_exit_" + syscallName
		tpExit, err := link.Tracepoint("syscalls", exitName, objs.TracepointExecveExit, nil)
		if err != nil {
			log.Fatalf("opening exit tracepoint for %s: %s", syscallName, err)
		}
		tracepoints = append(tracepoints, tpExit)
		log.Printf("Attached to tracepoint: syscalls/%s", exitName)
	}
	// Close all tracepoints on exit
	defer func() {
		for _, tp := range tracepoints {
			tp.Close()
		}
	}()

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.Events)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var event ebpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		filename := unix.ByteSliceToString(event.Filename[:])
		comm := unix.ByteSliceToString(event.Comm[:])

		// Try to get the full path from /proc/<pid>/exe
		fullPath := filename
		procExePath := fmt.Sprintf("/proc/%d/exe", event.Pid)
		if resolvedPath, err := os.Readlink(procExePath); err == nil {
			fullPath = resolvedPath
		}

		// Apply filename filtering if configured
		if len(cfg.filterFilenames) > 0 {
			matched := false
			// Check if any of the filter patterns match
			for _, filter := range cfg.filterFilenames {
				if strings.Contains(fullPath, filter) ||
				   strings.Contains(filename, filter) ||
				   strings.Contains(comm, filter) {
					matched = true
					break
				}
			}
			if !matched {
				continue // Skip this event
			}
		}

		log.Printf("pid: %d\tcomm: %s\tpath: %s\n",
			event.Pid,
			comm,
			fullPath)
	}
}